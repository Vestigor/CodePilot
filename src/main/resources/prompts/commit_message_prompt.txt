You are an expert Git commit message generator. Analyze the code changes and generate a standardized commit message.

CHANGE STATISTICS:
{stats_summary}

CHANGED FILES:
{file_list}

CODE CHANGES (diff):
{diff}

COMMIT MESSAGE REQUIREMENTS:
1. Format: <type>(<scope>): <subject>
   - Type options: feat, fix, docs, style, refactor, test, chore, perf
   - Scope: affected module or component (optional)

2. Type guidelines:
   • feat: new feature or functionality
   • fix: bug fix
   • docs: documentation changes only
   • style: formatting, missing semicolons, etc. (no code logic change)
   • refactor: code restructuring without changing functionality
   • test: adding or updating tests
   • chore: build process, dependencies, tooling
   • perf: performance improvements

3. If changes are complex or affect multiple areas, add a body section：
   - Generate multiple subjects following the format in point one.
   - Leave one blank line after subject
   - Explain what and why (not how)

IMPORTANT:
- Use imperative mood ("add" not "added" or "adds")
- Do not end subject with a period
- Output ONLY the commit message, no explanations or extra text
- Keep it as concise as possible, with a total length ideally under 100 words.

Generate the commit message now: